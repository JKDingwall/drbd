PACKAGE_VERSION="#MODULE_VERSION#"
PACKAGE_NAME="drbd"
MAKE="make -C src/drbd KDIR=$kernel_source_dir"
CLEAN="make -C src/drbd clean KDIR=$kernel_source_dir"
AUTOINSTALL="yes"

BUILT_MODULE_NAME[0]="drbd"
BUILT_MODULE_NAME[1]="drbd_transport_tcp"
BUILT_MODULE_NAME[2]="drbd_transport_lb-tcp"
BUILT_MODULE_LOCATION[0]="./src/drbd/build-current/"
BUILT_MODULE_LOCATION[1]="./src/drbd/build-current/"
BUILT_MODULE_LOCATION[2]="./src/drbd/build-current/"
DEST_MODULE_LOCATION[0]="/kernel/drivers/block/drbd"
DEST_MODULE_LOCATION[1]="/kernel/drivers/block/drbd"
DEST_MODULE_LOCATION[2]="/kernel/drivers/block/drbd"

IDX=3

if grep -q ^CONFIG_INFINIBAND= "$kernel_source_dir/.config"; then
BUILT_MODULE_NAME[$IDX]="drbd_transport_rdma"
BUILT_MODULE_LOCATION[$IDX]="./src/drbd/build-current/"
DEST_MODULE_LOCATION[$IDX]="/kernel/drivers/block/drbd"
IDX=$(($IDX + 1))
fi

test -z $BUILD_OFED &&
test -e /usr/src/ofa_kernel/default/Module.symvers &&
modinfo mlx_compat &>/dev/null &&
MAKE+=" BUILD_OFED=1"

# See drbd/Kbuild: this is that check for the kernel version, but worse: check for kernel >= 4.17
IFS=".-" read -ra KVER <<< "$kernelver"
if [ "${KVER[0]}" -ge 4 ] && ( [ "${KVER[0]}" -gt 4 ] || [ "${KVER[1]}" -ge 17 ] ) ; then
if grep -q ^CONFIG_TLS= "$kernel_source_dir/.config" && ! grep -q ^CONFIG_NET_HANDSHAKE= "$kernel_source_dir/.config" ; then
BUILT_MODULE_NAME[$IDX]="handshake"
BUILT_MODULE_LOCATION[$IDX]="./src/drbd/build-current/drbd-kernel-compat/handshake"
DEST_MODULE_LOCATION[$IDX]="/kernel/net/handshake"
fi
fi

# On some distros (OL8 for example), the default cc is not the one used to build the kernel.
# In this case, the gcc is installed as a "Software Collection" which can be enabled.
# So we try to find a compiler that matches the version used to build the original kernel.
get_cc_version() {
	if [ -n "$1" ]; then
		scl run "$1" -- "$kernel_source_dir/scripts/cc-version.sh" cc | cut -d' ' -f2
	else
		"$kernel_source_dir/scripts/cc-version.sh" cc | cut -d' ' -f2
	fi
}

if [ -e "$kernel_source_dir/scripts/cc-version.sh" ]; then
	KERNEL_GCC_VERSION="$(grep ^CONFIG_GCC_VERSION= "$kernel_source_dir/.config" | cut -d= -f2)"

	if [ "$KERNEL_GCC_VERSION" -gt "$(get_cc_version)" ] && command -v scl >/dev/null; then
		for COLLECTION in $(scl list-collections); do
			if [ "$KERNEL_GCC_VERSION" -le "$(get_cc_version "$COLLECTION")" ]; then
				MAKE="scl run $COLLECTION -- $MAKE"
				break
			fi
		done
	fi
fi
