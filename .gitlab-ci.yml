variables:
  RELEASE_BRANCH: drbd-9.1
  DRBD_VERSION_BASE: 9.1.0
  DRBD9_TESTS_REF: master
  BUILD_HELPERS_VERSION: a87d4f95c35fa24eebe1a157408ef59cebd1f3f4
  # we have to change the way GitLab CI clones the repository.
  # by default, it is shallow, which gives us a wrong commit count when
  # we do `git rev-list --count origin/master` below.
  GIT_DEPTH: 0
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: normal

stages:
  - check
  - build
  - test

.setup-lbbuild:
  before_script:
    - . gitlab-utils.sh && . .gitlab/gitlab-utils.sh
    - ci_prepare_tools
    - ci_fetch_rq
    - ci_fetch_lbbuildctl
    - git clone --branch ${DRBD9_TESTS_REF} https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/drbd/drbd9-tests.git
    - |
      kernels_from_vms() {
        rq -t < drbd9-tests/virter/vms.toml | \
          jq -r '.vms[].metadata | .BuildDistribution + " " + .BuildKernel'
      }

      # parameters: [version]
      # select all "build targets" for the given drbd version,
      # ignoring some distros that always fail in CI anyway
      all_kernels() {
        local version="$1"
        lbbuildctl build drbd -v $version --arch amd64 --debug debugSpecJson | \
          jq -r '.[] | .image + " " + .aux_version' | \
          grep -v ^sles12 | grep -v ^docker
      }

      # parameters: [version] [release] [rel-version] [kernels]
      # kernels should be a string with lines with the format: "[distribution] [kernel version]"
      drbd_build () {
        local version="$1"
        local release="$2"
        local rel_version="$3"
        local kernels="$4"

        set -x

        drbd_dummy_release "$version" "$release" "$rel_version"
        make FORCE=1 PRESERVE_DEBIAN=1 REL_VERSION="$rel_version" tarball
        curl -isSf -u $LINBIT_REGISTRY_USER:$LINBIT_REGISTRY_PASSWORD \
          --upload-file drbd-*.tar.gz \
          $LINBIT_REGISTRY_URL/repository/lbbuild-upstream/

        echo "$kernels" | parallel --colsep ' ' -k -j24 \
          lbbuildctl build drbd --arch amd64 --ci -v "$rel_version" --compat-only -l \
            -e LINBIT_REGISTRY_USER=$LINBIT_REGISTRY_USER \
            -e LINBIT_REGISTRY_PASSWORD=$LINBIT_REGISTRY_PASSWORD \
            -e LINBIT_REGISTRY_URL=$LINBIT_REGISTRY_URL \
            -d {1} -k {2}

        pushd drbd/drbd-kernel-compat
        local compat_hs
        while read line; do
          kver=${line#* } # everything after " " -> the kernel version
          curl -fsSLO "$LINBIT_REGISTRY_URL/repository/drbd-compat/$rel_version/compat.h.$kver"
          compat_hs+=("compat.h.$kver")
        done <<< "$kernels"
        ./build_cocci_cache.sh ${compat_hs[@]}
        popd

        make -j $(nproc) -C drbd compat
        make FORCE=1 PRESERVE_DEBIAN=1 REL_VERSION="$rel_version" tarball
        curl -isSf -u $LINBIT_REGISTRY_USER:$LINBIT_REGISTRY_PASSWORD \
          --upload-file drbd-*.tar.gz \
          $LINBIT_REGISTRY_URL/repository/lbbuild-upstream/

        echo "$kernels" | parallel --colsep ' ' -k -j24 \
          lbbuildctl build drbd --arch amd64 --ci -v "$rel_version" -l \
            -e LINBIT_REGISTRY_USER=$LINBIT_REGISTRY_USER \
            -e LINBIT_REGISTRY_PASSWORD=$LINBIT_REGISTRY_PASSWORD \
            -e LINBIT_REGISTRY_URL=$LINBIT_REGISTRY_URL \
            -d {1} -k {2}

        set +x
      }

# rules clause determining whether to build
.rules-build:
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == $RELEASE_BRANCH

check:coccicheck:
  stage: check
  extends: [ .rules-build ]
  image: szeder/coccinelle:1.1.0-1
  script:
    - make coccicheck

check:check-compat:
  stage: check
  extends: [ .rules-build ]
  image: szeder/coccinelle:1.1.0-1
  script:
    - make check-compat

check:checkpatch.pl:
  stage: check
  rules:
    - if: $CI_MERGE_REQUEST_ID
  image: perl:5
  script:
    - curl -sSLO https://raw.githubusercontent.com/torvalds/linux/master/scripts/checkpatch.pl
    - chmod +x checkpatch.pl
    - git fetch --no-tags origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - base=$(git merge-base remotes/origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME} HEAD)
    - git diff --submodule=diff ${base}...HEAD -- drbd/{drbd-headers/{linux/,},linux/,}*\.[ch] > merge_request.diff
    - ./checkpatch.pl --no-tree --ignore FILE_PATH_CHANGES merge_request.diff

build:for-tests:
  stage: build
  extends: [ .rules-build, .setup-lbbuild ]
  image: $LINBIT_DOCKER_REGISTRY/build-helpers:$BUILD_HELPERS_VERSION
  script:
    - if [ "$CI_COMMIT_BRANCH" = "$RELEASE_BRANCH" ]; then
    -   DRBD_VERSION=$DRBD_VERSION_BASE.latest
    -   DRBD_RELEASE=$(git rev-list --count "origin/$CI_COMMIT_BRANCH")
    - else
    -   DRBD_VERSION=$DRBD_VERSION_BASE.$CI_COMMIT_SHA
    -   DRBD_RELEASE=1
    - fi
    - echo DRBD_VERSION=$DRBD_VERSION >> build.env
    - drbd_build $DRBD_VERSION $DRBD_RELEASE $DRBD_VERSION "$(kernels_from_vms)"
  artifacts:
    reports:
      dotenv: build.env
    paths:
      - drbd/drbd-kernel-compat/cocci_cache
    when: always
    expire_in: 1 week
  needs: []

build:all:
  stage: build
  extends: [ .setup-lbbuild ]
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: manual
  allow_failure: true
  image: $LINBIT_DOCKER_REGISTRY/build-helpers:$BUILD_HELPERS_VERSION
  script:
    - DRBD_VERSION=$DRBD_VERSION_BASE.$CI_COMMIT_SHA
    - DRBD_RELEASE=1
    - echo DRBD_VERSION=$DRBD_VERSION >> build.env
    - drbd_build $DRBD_VERSION $DRBD_RELEASE $DRBD_VERSION "$(all_kernels $DRBD_VERSION)"
  artifacts:
    reports:
      dotenv: build.env
    paths:
      - drbd/drbd-kernel-compat/cocci_cache
    when: always
    expire_in: 1 week
  needs: []

.test:
  tags:
    - libvirt
  cache:
    paths:
      - download
  before_script:
    - |
      set -e
      run_test() {
        git clone --branch ${DRBD9_TESTS_REF} https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/drbd/drbd9-tests.git
        . drbd9-tests/virter/version.env

        curl -sSfL -u gitlab-ci-token:$CI_JOB_TOKEN $CI_SERVER_URL/linbit/build-helpers/-/archive/$BUILD_HELPERS_VERSION/ignored.tar.gz | tar -xvzf -
        mv build-helpers-* build-helpers
        . build-helpers/gitlab-utils.sh

        ci_prepare_tools
        ci_fetch_rq
        ci_fetch_binary virter virter-$VIRTER_VERSION https://github.com/LINBIT/virter/releases/download/$VIRTER_VERSION/virter-linux-amd64
        ci_fetch_binary vmshed vmshed-$VMSHED_VERSION https://github.com/LINBIT/vmshed/releases/download/$VMSHED_VERSION/vmshed-linux-amd64

        docker image pull $LINBIT_DOCKER_REGISTRY/drbd9-tests:latest

        export DRBD_VERSION=$DRBD_VERSION
        export DRBD_UTILS_VERSION=9.0.0.latest-*
        export DRBD9_TESTS_VERSION=latest
        cd drbd9-tests
        ./virter/run-test.sh --out-dir=../tests-out "$@"
      }
  dependencies:
    - build:for-tests
  artifacts:
    # provide a convenient name so that the downloaded artifacts can be identified
    name: $CI_PROJECT_NAME-$CI_JOB_ID
    paths:
      - tests-out/
    when: always
    reports:
      junit: tests-out/test-results/*.xml
  needs:
    - build:for-tests

test:
  stage: test
  extends: [ .test ]
  rules:
    - if: $CI_MERGE_REQUEST_ID
  script: run_test

test-all:
  stage: test
  extends: [ .test ]
  variables:
    DRBD_TEST_REPEATS: 1
    DRBD_TEST_VMSHED_ARGS: ""
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: manual
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  allow_failure: true
  script:
    - |
      export VMSHED_TEST_SELECTION=all
      run_test \
        --repeats="$DRBD_TEST_REPEATS" \
        --error-details=false \
        --quiet \
        $DRBD_TEST_VMSHED_ARGS || true
      ./virter/elasticsearch/elasticsearch-insert.sh https://es01.at.linbit.com ../tests-out/results.json
      cat ../.gitlab/kibana-version-comparison-url | tr -d '\n' | sed s/{{drbd_version}}/$DRBD_VERSION/
